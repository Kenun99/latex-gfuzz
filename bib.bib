@article{wood2014ethereum,
	author = {G. Wood},
	date-added = {2022-01-03 13:55:22 +0800},
	date-modified = {2022-01-03 13:55:22 +0800},
	journal = {Ethereum project yellow paper},
	title = {Ethereum: A secure decentralised generalised transaction ledger},
	year = {2022}}
	
	
	
@misc{coinmarketcap,
	date-added = {2022-01-02 16:50:31 +0800},
	date-modified = {2022-01-02 16:53:54 +0800},
	month = {May.},
	note = {[Online]. Available: \url{https://coinmarketcap.com/all/views/all/}.},
	title = {A Measurement Platform for Cryptocurrency by Market Capacity.},
	year = {2021}}
	
@misc{etherscan,
	date-added = {2022-01-02 16:50:31 +0800},
	date-modified = {2022-01-02 16:53:54 +0800},
	month = {May.},
	note = {[Online]. Available: \url{https://etherscan.io/}.},
	title = {A Block Explorer and Analytics Platform for Ethereum.},
	year = {2021}}

@article{cudaoverhead,
  title={Understanding the overheads of launching CUDA kernels},
  author={Zhang, Lingqi and Wahib, Mohamed and Matsuoka, Satoshi},
  journal={ICPP19},
  year={2019}
}


@misc{ethtract,
    author = {Ethereum},
    title = {A smart contract is simply a program that runs on the Ethereum blockchain.},
    note={[Online]. Available:  \url{https://ethereum.org/en/developers/docs/smart-contracts/}},
    year = {2021},
    month = {May.}
}

@inproceedings{smartcontractsurvey,
  author    = {Z. Wan and
               X. Xia and
               D. Lo and
               J. Chen and
               X. Luo and
               X. Yang},
  title     = {Smart Contract Security: a Practitioners' Perspective},
  booktitle = {Proc. {IEEE/ACM} International Conference on Software Engineering},
  year      = {2021},
}

@article{defects,
title = {Defining Smart Contract Defects on Ethereum},
author = {J. Chen and X. Xia and D. Lo and J. Grundy and X. Luo and T. Chen},
journal = {IEEE Transactions on Software Engineering},
number = {1},
volume = {48},
year = {2022}
}

@ARTICLE{fuzzingsurvey,  author={V. Pham and M. Böhme and A. Santosa and A. Căciulescu and A. Roychoudhury},  journal={IEEE Transactions on Software Engineering},   title={Smart Greybox Fuzzing},   year={2021},  volume={47},  number={9},  pages={1980-1997},  doi={10.1109/TSE.2019.2941681}}


@inproceedings{contractfuzzer_ase,
  title={Contractfuzzer: Fuzzing smart contracts for vulnerability detection},
  author={B. Jiang and Y. Liu and W. Chan},
  booktitle={2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)},
  pages={259--269},
  year={2018},
  organization={IEEE}
}


@inproceedings{echidna_issta,
  title={Echidna: effective, usable, and fast fuzzing for smart contracts},
  author={G. Grieco and W. Song and A. Cygan and J. Feist and A. Groce},
  booktitle={Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA)},
  pages={557--560},
  year={2020}
}


@inproceedings{ilf_ccs,
  title={Learning to fuzz from symbolic execution with application to smart contracts},
  author={J. He and M. Balunovi{\'c} and N. Ambroladze and P. Tsankov and M. Vechev},
  booktitle={Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security},
  pages={531--548},
  year={2019}
}


@inproceedings{sfuzz_icse,
  title={sfuzz: An efficient adaptive fuzzer for solidity smart contracts},
  author={T. Nguyen and L. Pham and J. Sun and Y. Lin and Q. Minh},
  booktitle={Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  pages={778--788},
  year={2020}
}

@inproceedings{confuzzius_eurosp,
  title={ConFuzzius: A Data Dependency-Aware Hybrid Fuzzer for Smart Contracts},
  author={C. Torres and A. Iannillo and A. Gervais and R. State},
  booktitle={2021 IEEE European Symposium on Security and Privacy (EuroS\&P)},
  pages={103--119},
  year={2021},
  organization={IEEE}
}


@misc{afl,
	date-added = {2022-01-02 16:50:31 +0800},
	date-modified = {2022-01-02 16:53:54 +0800},
	month = {May.},
	author = {M. Zalewski},
	note = {[Online]. Available: \url{https://github.com/google/AFL}.},
	title = {American fuzzy lop, a security-oriented fuzzer},
	year = {2021}}

@inproceedings {fuzzan_atc,
author = {Y. Jeon and W. Han and N. Burow and M. Payer},
title = {{FuZZan}: Efficient Sanitizer Metadata Design for Fuzzing},
booktitle = {2020 USENIX Annual Technical Conference (USENIX ATC 20)},
year = {2020},
isbn = {978-1-939133-14-4},
pages = {249--263},
url = {https://www.usenix.org/conference/atc20/presentation/jeon},
publisher = {USENIX Association},
month = jul,
}

@inproceedings{nyx_sec,
  title={Nyx: Greybox hypervisor fuzzing using fast snapshots and affine types},
  author={Schumilo, Sergej and Aschermann, Cornelius and Abbasi, Ali and W{\"o}rner, Simon and Holz, Thorsten},
  booktitle={30th USENIX Security Symposium (USENIX Security 21)},
  pages={2597--2614},
  year={2021}
}

@inproceedings{distributed_fuzz,
author = {Y. Li and C. Feng and C. Tang},
title = {A Large-Scale Parallel Fuzzing System},
year = {2018},
isbn = {9781450364607},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3239576.3239615},
doi = {10.1145/3239576.3239615},
booktitle = {Proceedings of the 2nd International Conference on Advances in Image Processing},
pages = {194–197},
numpages = {4},
keywords = {Vulnerability discovery, Parallel fuzzing, Distributed computing, Test case generation},
location = {Chengdu, China},
series = {ICAIP '18}
}

@misc{clusterfuzz,
	date-added = {2022-01-02 16:50:31 +0800},
	date-modified = {2022-01-02 16:53:54 +0800},
	month = {May.},
	author = {Google},
	note = {[Online]. Available: \url{https://github.com/google/clusterfuzz/}.},
	title = {A Distributed Fuzzer Based on OSS-Fuzzer.},
	year = {2022}}


@misc{wtf,
	date-added = {2022-01-02 16:50:31 +0800},
	date-modified = {2022-01-02 16:53:54 +0800},
	month = {May.},
	author = {A. Souchet},
	note = {[Online]. Available: \url{https://github.com/0vercl0k/wtf}.},
	title = {A Distributed Fuzzer for Kernel-mode Targets Running on Windows.},
	year = {2021}}



@inproceedings{xu2017designing,
  title={Designing new operating primitives to improve fuzzing performance},
  author={W. Xu and S. Kashyap and C. Min and T. Kim},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2313--2328},
  year={2017}
}

@inproceedings{angora_sp,
  title={Angora: Efficient fuzzing by principled search},
  author={Chen, Peng and Chen, Hao},
  booktitle={2018 IEEE Symposium on Security and Privacy (SP)},
  pages={711--725},
  year={2018},
  organization={IEEE}
}

@inproceedings{symcc_sec,
  title={Symbolic execution with $\{$SymCC$\}$: Don't interpret, compile!},
  author={Poeplau, Sebastian and Francillon, Aur{\'e}lien},
  booktitle={29th USENIX Security Symposium (USENIX Security 20)},
  pages={181--198},
  year={2020}
}

@inproceedings{enfuzz_sec,
  title={$\{$EnFuzz$\}$: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers},
  author={Chen, Yuanliang and Jiang, Yu and Ma, Fuchen and Liang, Jie and Wang, Mingzhe and Zhou, Chijin and Jiao, Xun and Su, Zhuo},
  booktitle={28th USENIX Security Symposium (USENIX Security 19)},
  pages={1967--1983},
  year={2019}
}

@misc{solidity,
	date-added = {2022-01-03 13:26:41 +0800},
	date-modified = {2022-01-03 13:27:36 +0800},
	month = {May.},
	note = {[Online]. Available: \url{https://docs.soliditylang.org/}.},
	title = {An high-level language for implementing smart contracts. },
	year = {2021}}

@misc{falk2018vectorized,
  title={Vectorized Emulation: Hardware accelerated taint tracking at 2 trillion instructions per second},
  note = {[Online]. Available: \url{https://gamozolabs.github.io/fuzzing/2018/10/14/vectorized\_emulation.html}},
  author={Falk, Brandon},
  year={2018}
}

@misc{nvidia2021cuda,
  title={Cuda toolkit documentation},
  author={Nvidia, CUDA},
  note = {[Online]. Available: \url{https://docs.nvidia.com/cuda/}},
  year={2021}
}

@misc{binance2021whitepaper,
  title={Binance Whitepaper},
  author={Binance Exchange},
  note = {[Online]. Available: \url{https://www.exodus.com/assets/docs/binance-coin-whitepaper.pdf}},
  year={2021}
}
@misc{polkadot2021whitepaper,
  title={Polkadot Whitepaper},
  author={Gavin Wood},
  note = {[Online]. Available: \url{https://polkadot.network/PolkaDotPaper.pdf}},
  year={2021}
}

@misc{dai2021paper,
  title={The Dai Stablecoin System},
  author={Maker Team},
  note = {[Online]. Available: \url{https://makerdao.com/whitepaper/DaiDec17WP.pdf}},
  year={2021}
}

@misc{tron2021paper,
  title={TRON Protocol Whitepaper},
  author={TRON DAO},
  note = {[Online]. Available:\url{https://tron.network/static/doc/white_paper_v_2_0.pdf}},
  year={2021}
}

@misc{avalab2021paper,
  title={Avalanche Platform Whitepaper},
  author={Kevin Sekniqi, Daniel Laine, Stephen Buttolph and Emin Gun Sirer},
  note = {[Online]. Available: \url{https://www.avalabs.org/whitepapers}},
  year={2021}
}

@inproceedings{bertoni2013keccak,
  title={Keccak},
  author={Bertoni, Guido and Daemen, Joan and Peeters, Micha{\"e}l and Assche, Gilles Van},
  booktitle={Annual international conference on the theory and applications of cryptographic techniques},
  pages={313--314},
  year={2013},
  organization={Springer}
}

@misc{ptx2021doc,
  title={Parallel Thread Execution ISA Version 7.8},
  author={Nvidia, CUDA},
  note = {[Online]. Available: \url{https://docs.nvidia.com/cuda/parallel-thread-execution/}},
  year={2021}
}

@misc{evm2021opcodes,
  title={Ethereum Virtual Machine Opcodes},
  author={Ethervm},
  note = {[Online]. Available: \url{https://ethervm.io}},
  year={2021}
}


@misc{row2021ibm,
  title={The Redirect-on-Write (ROW) mechanism of IBM Spectrum Accelerate},
  author={IBM},
  note = {[Online]. Available: \url{ https://www.ibm.com/docs/en/spectrum-accelerate/11.5.4?topic=snapshots-redirect-write}},
  year={2021}
}

@inproceedings{cuda2006datapara,
author = {D. Tarditi and S. Puri and J. Oglesby},
title = {Accelerator: Using Data Parallelism to Program GPUs for General-Purpose Uses},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
booktitle = {Proceedings of the 12th International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {325–335},
location = {San Jose, California, USA},
series = {ASPLOS XII}
}


@inproceedings{branchdiver2011gpgpu,
author = {T. David and S. Abdelrahman},
title = {Reducing Branch Divergence in GPU Programs},
year = {2011},
isbn = {9781450305693},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
booktitle = {Proceedings of the Fourth Workshop on General Purpose Processing on Graphics Processing Units},
articleno = {3},
numpages = {8},
keywords = {branch divergence, data parallel programming, GPGPU},
location = {Newport Beach, California, USA},
series = {GPGPU-4}
}


@inproceedings{lattner2004llvm,
  title={LLVM: A compilation framework for lifelong program analysis \& transformation},
  author={Lattner, Chris and Adve, Vikram},
  booktitle={International Symposium on Code Generation and Optimization, 2004. CGO 2004.},
  pages={75--86},
  year={2004},
  organization={IEEE}
}


@misc{llvm2021bin,
  title={LLVM releases},
  author={LLVM},
  note = {[Online]. Available: \url{https://github.com/llvm/llvm-project.git}},
  year={2021}
}

@inproceedings{10.1145/2048066.2048126,
author = {Kulkarni, Prasad A.},
title = {JIT Compilation Policy for Modern Machines},
year = {2011},
isbn = {9781450309400},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2048066.2048126},
doi = {10.1145/2048066.2048126},
abstract = {Dynamic or Just-in-Time (JIT) compilation is crucial to achieve acceptable performance for applications (written in managed languages, such as Java and C#) distributed as intermediate language binary codes for a virtual machine (VM) architecture. Since it occurs at runtime, JIT compilation needs to carefully tune its compilation policy to make effective decisions regarding 'if' and 'when' to compile different program regions to achieve the best overall program performance. Past research has extensively tuned JIT compilation policies, but mainly for VMs with a single compiler thread and for execution on single-processor machines.This work is driven by the need to explore the most effective JIT compilation strategies in their modern operational environment, where (a) processors have evolved from single to multi/many cores, and (b) VMs provide support for multiple concurrent compiler threads. Our results confirm that changing 'if' and 'when' methods are compiled have significant performance impacts. We construct several novel configurations in the HotSpot JVM to facilitate this study. The new configurations are necessitated by modern Java benchmarks that impede traditional static whole-program discovery, analysis and annotation, and are required for simulating future many-core hardware that is not yet widely available. We study the effects on performance of increasing compiler aggressiveness for VMs with multiple compiler threads running on existing single/multi-core and future many-core machines. Our results indicate that although more aggressive JIT compilation policies show no benefits on single-core machines, these can often improve program performance for multi/many-core machines. However, accurately prioritizing JIT method compilations is crucial to realize such benefits.},
booktitle = {Proceedings of the 2011 ACM International Conference on Object Oriented Programming Systems Languages and Applications},
pages = {773–788},
numpages = {16},
keywords = {virtual machines, multicore, Java, dynamic compilation},
location = {Portland, Oregon, USA},
series = {OOPSLA '11}
}

@article{jit2011survey,
author = {Kulkarni, Prasad A.},
title = {JIT Compilation Policy for Modern Machines},
year = {2011},
issue_date = {October 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/2076021.2048126},
journal = {SIGPLAN Not.},
month = {oct},
pages = {773–788},
numpages = {16},
keywords = {Java, virtual machines, multicore, dynamic compilation}
}



@inproceedings{nuzman2011vapor,
  title={Vapor SIMD: Auto-vectorize once, run everywhere},
  author={D. Nuzman and S. Dyshel and E. Rohou and I. Rosen and K. Williams and D. Yuste and A. Cohen and A. Zaks},
  booktitle={International Symposium on Code Generation and Optimization (CGO 2011)},
  pages={151--160},
  year={2011},
  organization={IEEE}
}